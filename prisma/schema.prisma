generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id       Int    @id @default(autoincrement())
  name     String
  lastName String
  username String
  password String
  rolId    Int
  roles    Role   @relation(fields: [rolId], references: [id])
}

model Role {
  id    Int     @id @default(autoincrement())
  rol   String
  Users Users[]
}

model Client {
  id                    Int                     @id @default(autoincrement())
  name                  String
  rif                   String
  address               String
  addressSecondary      String?
  phone                 String
  zone                  String
  blockId               Int
  block                 Block                   @relation(fields: [blockId], references: [id])
  active                Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  invoices              Invoice[]
  ClientReminder        ClientReminder[]
  ClientReminderHistory ClientReminderHistory[]
  Notification          Notification[]
}

model Block {
  id      Int      @id @default(autoincrement())
  name    String
  address String
  clients Client[]
}

model Invoice {
  id             Int              @id @default(autoincrement())
  client         Client           @relation(fields: [clientId], references: [id])
  clientId       Int
  dispatchDate   DateTime
  dueDate        DateTime
  controlNumber  String           @unique
  exchangeRate   Int?
  sellerId       Int?
  seller         Seller?          @relation(fields: [sellerId], references: [id])
  totalAmount    Decimal          @db.Decimal(10, 2)
  remaining      Decimal          @default(0) @db.Decimal(10, 2)
  consignment    Boolean
  status         InvoiceStatus
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deleted        Boolean          @default(false)
  invoiceItems   InvoiceProduct[]
  InvoicePayment InvoicePayment[]
}

enum InvoiceStatus {
  Creada
  Pendiente
  Pagado
  Vencida
  Cancelada
}

model Product {
  id           Int    @id @default(autoincrement())
  name         String
  presentation String
  type         String @default("Cafe")

  purchasePrice      Decimal            @db.Decimal(10, 2)
  purchasePriceUSD   Decimal            @default(0) @db.Decimal(10, 2)
  price              Decimal            @db.Decimal(10, 2)
  priceUSD           Decimal            @db.Decimal(10, 2)
  amount             Int
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  inventoryMovements Inventory[]
  invoiceItems       InvoiceProduct[]
  HistoryInventory   HistoryInventory[]
}

model HistoryProduct {
  id               Int      @id @default(autoincrement())
  name             String
  presentation     String
  purchasePrice    Decimal  @db.Decimal(10, 2)
  purchasePriceUSD Decimal  @default(0) @db.Decimal(10, 2)
  price            Decimal  @db.Decimal(10, 2)
  priceUSD         Decimal  @db.Decimal(10, 2)
  amount           Int
  createdAt        DateTime @default(now())
}

model Inventory {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
}

enum InventoryType {
  IN
  OUT
  EDIT
}

model HistoryInventory {
  id           Int           @id @default(autoincrement())
  product      Product       @relation(fields: [productId], references: [id])
  productId    Int
  quantity     Int
  description  String        @default("")
  movementType InventoryType
  movementDate DateTime      @default(now())
}

model HistoryDolar {
  id      Int       @id @default(autoincrement())
  dolar   Decimal   @db.Decimal(10, 2)
  date    DateTime  @default(now())
  Payment Payment[]
}

model InvoiceProduct {
  id           Int                @id @default(autoincrement())
  invoice      Invoice            @relation(fields: [invoiceId], references: [id])
  invoiceId    Int
  product      Product            @relation(fields: [productId], references: [id])
  productId    Int
  quantity     Int
  type         InvoiceTypeProduct @default(SALE)
  unitPriceUSD Decimal            @default(0) @db.Decimal(10, 2)
  unitPrice    Decimal            @db.Decimal(10, 2)
  subtotal     Decimal            @db.Decimal(10, 2)

  @@unique([invoiceId, productId, type]) // No se puede repetir el producto en la misma factura
}

enum InvoiceTypeProduct {
  GIFT
  SALE
}

model AccountsPayments {
  id        Int           @id @default(autoincrement())
  name      String
  bank      String
  methodId  Int
  method    PaymentMethod @relation(references: [id], fields: [methodId])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  Payment   Payment[]
}

model Payment {
  id             Int              @id @default(autoincrement())
  amount         Decimal          @db.Decimal(10, 2)
  remaining      Decimal          @default(0) @db.Decimal(10, 2)
  accountId      Int
  account        AccountsPayments @relation(fields: [accountId], references: [id])
  reference      String
  description    String           @default("")
  dolarId        Int
  dolar          HistoryDolar     @relation(fields: [dolarId], references: [id])
  paymentDate    DateTime
  status         PaymentStatus
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  InvoicePayment InvoicePayment[]
}

model InvoicePayment {
  id        Int     @id @default(autoincrement())
  invoiceId Int
  paymentId Int
  amount    Decimal @db.Decimal(10, 2) // Monto asignado de este pago a esta factura

  invoice Invoice @relation(fields: [invoiceId], references: [id])
  payment Payment @relation(fields: [paymentId], references: [id])

  createdAt DateTime @default(now())

  @@unique([invoiceId, paymentId]) // No se puede repetir la relación
}

model PaymentMethod {
  id               Int                @id @default(autoincrement())
  name             String
  currency         Currency
  AccountsPayments AccountsPayments[]
}

enum PaymentStatus {
  CONFIRMED
  PENDING
}

enum Currency {
  USD
  BS
}

model Notification {
  id        Int              @id @default(autoincrement())
  type      String
  message   String
  seen      Boolean          @default(false)
  createdAt DateTime         @default(now())
  Client    Client           @relation(fields: [clientId], references: [id])
  clientId  Int
}

model Seller {
  id         Int       @id @default(autoincrement())
  name       String
  phone      String
  commission Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  sales      Sale[]
  Invoice    Invoice[]
}

model Sale {
  id        Int      @id @default(autoincrement())
  seller    Seller   @relation(fields: [sellerId], references: [id])
  sellerId  Int
  total     Int
  saleDate  DateTime
  createdAt DateTime @default(now())
}

model ErrorMessages {
  id        Int      @id @default(autoincrement())
  message   String
  from      String
  createdAt DateTime @default(now())
}

model Message {
  id                    Int                     @id @default(autoincrement())
  title                 String                  @db.VarChar(100) // Título opcional
  content               String                  @db.Text // Mensaje largo con saltos de línea, emojis, etc.
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  ClientReminder        ClientReminder[]
  ClientReminderHistory ClientReminderHistory[]
}

model ClientReminder {
  id        Int       @id @default(autoincrement())
  clientId  Int
  messageId Int
  send      Boolean   @default(false) // Marcar si se va a enviar o no
  sentAt    DateTime? // Fecha en la que realmente fue enviado (opcional)
  client    Client    @relation(fields: [clientId], references: [id])
  message   Message   @relation(fields: [messageId], references: [id])
  createdAt DateTime  @default(now())
}

model ClientReminderHistory {
  id          Int       @id @default(autoincrement())
  clientId    Int
  messageId   Int
  description String
  sended      Boolean   @default(false) // Marcar si se va a enviar o no
  sentAt      DateTime? // Fecha en la que realmente fue enviado (opcional)
  client      Client    @relation(fields: [clientId], references: [id])
  message     Message   @relation(fields: [messageId], references: [id])
  createdAt   DateTime  @default(now())
}

model Settings {
  id    Int    @id @default(autoincrement())
  name  String
  value String
}
